@using EvoCharacterManager.Models.ViewModels
@using EvoValueManager.Models.Shared
@model ManagementPageViewModel

@{
    ViewBag.Title = "Vezetés/Fejlesztés";
}

<h2>Vezetés/Fejlesztés</h2>

<div class="evo-flex">
    @using (Html.BeginForm("Assign", "Management", FormMethod.Post))
    {
        @Html.DropDownListFor(m => m.SelectedAssignedId, (SelectList)Model.SelectableAssignedValues,
            new { @class = "form-control evo-margin evo-dropdown", onchange = "this.form.submit();" })
    }

    @using (Html.BeginForm("CharacterSelection", "Management", FormMethod.Post))
    {
        @Html.HiddenFor(m => m.SelectedAssignedId)
        @Html.DropDownListFor(m => m.SelectedCharacterId, (SelectList)Model.SelectableCharacters, "Válassz egy csapattagot",
            new { @class = "form-control evo-margin evo-dropdown", onchange = "this.form.submit();" })
    }

    @if (Model.SelectableChallenges != null)
    {
        @using (Html.BeginForm("ChallengeSelection", "Management", FormMethod.Post))
        {
            @Html.HiddenFor(m => m.SelectedAssignedId)
            @Html.HiddenFor(m => m.SelectedCharacterId)
            @Html.DropDownListFor(m => m.SelectedChallengeId, (SelectList)Model.SelectableChallenges, "Válassz egy kihívást",
                new { @class = "form-control evo-margin evo-dropdown", onchange = "this.form.submit();" })
        }
    }

    @if (Model.SelectedAssignedId == 2 && Model.SelectedChallenge != null)
    {
        @using (Html.BeginForm("StateSelection", "Management", FormMethod.Post))
        {
            @Html.HiddenFor(m => m.SelectedAssignedId)
            @Html.HiddenFor(m => m.SelectedCharacterId)
            @Html.HiddenFor(m => m.SelectedChallengeId)
            @Html.DropDownListFor(m => m.SelectedStateId, Model.SelectableStates, 
                Model.SelectedStateId == 0 ? "Válassz egy állapotot" : null,
                new { @class = "form-control evo-margin evo-dropdown", onchange = "this.form.submit();" })
        }
    }
</div>

@if (Model.SelectedCharacter != null && Model.SelectedChallenge != null)
{
    <div class="evo-details-margin">
        <h3>Elvárások</h3>
        @foreach (var trait in Constants.Traits.Values)
        {
            <div class="evo-flex">
                @{
                    var requiredTraitValue = Convert.ToInt32(Model.SelectedChallenge.GetType().GetProperty("Required" + trait.Property)!.GetValue(Model.SelectedChallenge));
                    var characterTraitValue = Convert.ToInt32(Model.SelectedCharacter.GetType().GetProperty(trait.Property)!.GetValue(Model.SelectedCharacter));

                    if (requiredTraitValue != 0)
                    {
                        <table>
                            <tr>
                                <td>
                                    <div class="evo-traits-image-small">
                                        <img src="@Url.Content(trait.ImageSmall)" alt="@trait.Title" title="@trait.Title"/>
                                    </div>
                                </td>
                                <td style="padding-left: 10px;">
                                    <p>
                                        @(characterTraitValue) @(requiredTraitValue)
                                        <span style="color: red; font-weight: bold">
                                            @(characterTraitValue >= requiredTraitValue ? "" : "!!!")
                                        </span>
                                    </p>
                                </td>
                            </tr>
                        </table>
                    }
                }
            </div>
        }
    </div>

    <div class="evo-details-margin">
        <h3>Fejlődési lehetőségek</h3>
        @foreach (var trait in Constants.Traits.Values)
        {
            <div class="evo-flex">
                @{
                    var gainableTraitValue = Convert.ToInt32(Model.SelectedChallenge.GetType().GetProperty("Gainable" + trait.Property)!.GetValue(Model.SelectedChallenge));
                    var characterTraitValue = Convert.ToInt32(Model.SelectedCharacter.GetType().GetProperty(trait.Property)!.GetValue(Model.SelectedCharacter));

                    @if (gainableTraitValue != 0)
                    {
                        <table>
                            <tr>
                                <td>
                                    <div class="evo-traits-image-small">
                                        <img src="@Url.Content(trait.ImageSmall)" alt="@trait.Title" title="@trait.Title"/>
                                    </div>
                                </td>
                                <td style="padding-left: 10px;">
                                    <p>
                                        @(characterTraitValue) +@(gainableTraitValue)
                                        (
                                        <span style="color: green">
                                            @(characterTraitValue + gainableTraitValue)
                                        </span> )
                                    </p>
                                </td>
                            </tr>
                        </table>
                    }
                }
            </div>
        }
    </div>

    <div class="evo-details-margin">
        @{
            var buttonConfigs = new List<Tuple<bool, string, string, string>>
            {
                Tuple.Create(Model.SelectedAssignedId == 2, "UpdateChallengeDetails", "Frissítés", "btn-secondary"),
                Tuple.Create(Model.SelectedAssignedId == 1, "AssignChallenge", "Kihívás felvétele", "btn-primary"),
                Tuple.Create(Model.SelectedAssignedId == 2, "CloseChallenge", "Lezárás", "btn-danger")
            };
            @using (Html.BeginForm("UpdateChallengeDetails", "Management", FormMethod.Post))
            {
                @Html.HiddenFor(m => m.SelectedAssignedId)
                @Html.HiddenFor(m => m.SelectedCharacterId)
                @Html.HiddenFor(m => m.SelectedChallengeId)
                <div>
                    <h3 style="display: inline-block; margin-right: 10px;">
                        Részletek
                    </h3>
                    @if (TempData["UpdateSuccess"] != null)
                    {
                        <span class="text-success"> @TempData["UpdateSuccess"] </span>
                    }
                    <textarea id="Details" name="Details" class="form-control" rows="5"
                  style="width: 100%">@Model.Details</textarea>
                </div>
                <div style="display: flex; gap: 10px; margin-top: 10px;">

                    @foreach (var buttonConfig in buttonConfigs)
                    {
                        if (buttonConfig.Item1)
                        {
                            if (buttonConfig.Item2 == "CloseChallenge")
                            {
                                <button type="submit" formaction="@Url.Action(buttonConfig.Item2, "Management")"
                                        class="btn @buttonConfig.Item4"
                                        onclick="return confirmChallengeClose('@ManagementPageViewModel.GetStateText(Model.SelectedStateId)')">
                                    @buttonConfig.Item3
                                </button>
                            }
                            else
                            {
                                <button type="submit" formaction="@Url.Action(buttonConfig.Item2, "Management")"
                                        class="btn @buttonConfig.Item4">
                                    @buttonConfig.Item3
                                </button>
                            }
                        }
                    }
                </div>
            }
        }
    </div>
}