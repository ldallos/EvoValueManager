@using EvoCharacterManager.Models.ViewModels
@using EvoValueManager.Models.Shared
@model ManagementPageViewModel

@{
    ViewBag.Title = "Vezetés/Fejlesztés";
}

<h2>Vezetés/Fejlesztés</h2>

<div class="evo-flex">
    @using (Html.BeginForm("Assign", "Management", FormMethod.Post))
    {
        @Html.DropDownListFor(m => m.SelectedAssignedId, (SelectList)Model.SelectableAssignedValues,
            new { @class = "form-control evo-margin evo-dropdown", onchange = "this.form.submit();" })
    }

    @using (Html.BeginForm("CharacterSelection", "Management", FormMethod.Post))
    {
        @Html.HiddenFor(m => m.SelectedAssignedId)
        @Html.DropDownListFor(m => m.SelectedCharacterId, (SelectList)Model.SelectableCharacters, "Válassz egy csapattagot",
            new { @class = "form-control evo-margin evo-dropdown evo-dropdown-select", onchange = "this.form.submit();" })
    }

    @if (Model.SelectableChallenges != null)
    {
        @using (Html.BeginForm("ChallengeSelection", "Management", FormMethod.Post))
        {
            @Html.HiddenFor(m => m.SelectedAssignedId)
            @Html.HiddenFor(m => m.SelectedCharacterId)
            @Html.DropDownListFor(m => m.SelectedChallengeId, (SelectList)Model.SelectableChallenges, "Válassz egy kihívást",
                new { @class = "form-control evo-margin evo-dropdown evo-dropdown-select", onchange = "this.form.submit();" })
        }
    }

</div>

@if (Model.SelectedCharacter != null && Model.SelectedChallenge != null)
{
    <div class="evo-details-margin">
        <h3>Elvárások
            @if (TempData["ErrorMessage"] != null)
            {
                <span class="text-danger" style="font-size: 0.75em"> @TempData["ErrorMessage"] </span>
            }
        </h3>
        <table>
            <td></td>
            <td>Jelenlegi értékék</td>
            <td>Elvárt értékek</td>
            <td>Fejlődési lehetőségek</td>

            @foreach (var trait in Constants.Traits.Values)
            {
                
                    var requiredTraitValue = Convert.ToInt32(Model.SelectedChallenge.GetType().GetProperty("Required" + trait.Property)!.GetValue(Model.SelectedChallenge));
                    var characterTraitValue = Convert.ToInt32(Model.SelectedCharacter.GetType().GetProperty(trait.Property)!.GetValue(Model.SelectedCharacter));
                    var gainableTraitValue = Convert.ToInt32(Model.SelectedChallenge.GetType().GetProperty("Gainable" + trait.Property)!.GetValue(Model.SelectedChallenge));

                    <tr>
                        <td>
                            <div class="evo-traits-image-small">
                                <img src="@Url.Content(trait.ImageSmall)" alt="@trait.Title" title="@trait.Title"/>
                            </div>
                        </td>
                        <td class="evo-table-values">

                            @(characterTraitValue)

                        </td>
                        <td class="evo-table-values"> @(requiredTraitValue)
                            <span style="color: red; font-weight: bold">
                                @(characterTraitValue >= requiredTraitValue ? "" : "!!!")
                            </span></td>
                        <td class="evo-table-values">
                            @(gainableTraitValue)
                            
                            @if (gainableTraitValue != 0)
                            {   
                                <span style="color: #575757">
                                    ( 
                                    <span style="color: green">@(characterTraitValue + gainableTraitValue) </span>
                                    )
                                </span>
                             
                            }
                            </td>
                    </tr>
            }
        </table>
    </div>

    <div class="evo-details-margin">
        @{
            var buttonConfigs = new List<Tuple<bool, string, string, string>>
            {
                Tuple.Create(Model.SelectedAssignedId == 2, "UpdateChallengeDetails", "Frissítés", "btn-secondary"),
                Tuple.Create(Model.SelectedAssignedId == 1, "AssignChallenge", "Kihívás felvétele", "btn-primary"),
                Tuple.Create(Model.SelectedAssignedId == 2, "CloseChallenge", "Lezárás", "btn-danger")
            };
            @using (Html.BeginForm("UpdateChallengeDetails", "Management", FormMethod.Post))
            {
                @Html.HiddenFor(m => m.SelectedAssignedId)
                @Html.HiddenFor(m => m.SelectedCharacterId)
                @Html.HiddenFor(m => m.SelectedChallengeId)
                <div>
                    <h3 style="display: inline-block; margin-right: 10px;">
                        Részletek
                    </h3>
                    @if (TempData["UpdateSuccess"] != null)
                    {
                        <span class="text-success"> @TempData["UpdateSuccess"] </span>
                    }

                    @Html.DropDownListFor(m => m.SelectedStateId, Model.SelectableStates,
                        Model.SelectedStateId == 0 ? "Válassz egy állapotot" : null,
                        new { @class = "form-control evo-margin evo-dropdown" })
                    <div class="management-details">
                        <svg xmlns="http://www.w3.org/2000/svg" class="svg_icon bi-chat-dots-fill" viewBox="0 0 16 16">
                            <path
                                d="M16 8c0 3.866-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.584.296-1.925.864-4.181 1.234-.2.032-.352-.176-.273-.362.354-.836.674-1.95.77-2.966C.744 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7zM5 8a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path>
                        </svg>
                        <textarea id="Details" name="Details" class="form-control" rows="5" placeholder="Részletek"
                                  style="width: 100%">@Model.Details</textarea></div>

                </div>
                <div style="display: flex; gap: 10px; margin-top: 10px;">

                    @foreach (var buttonConfig in buttonConfigs)
                    {
                        if (buttonConfig.Item1)
                        {
                            if (buttonConfig.Item2 == "CloseChallenge")
                            {
                                <button type="submit" formaction="@Url.Action(buttonConfig.Item2, "Management")"
                                        class="btn @buttonConfig.Item4"
                                        onclick="return confirmChallengeClose('@ManagementPageViewModel.GetStateText(Model.SelectedStateId)')">
                                    @buttonConfig.Item3
                                </button>
                            }
                            else
                            {
                                <button type="submit" formaction="@Url.Action(buttonConfig.Item2, "Management")"
                                        class="btn @buttonConfig.Item4">
                                    @buttonConfig.Item3
                                </button>
                            }
                        }
                    }
                </div>
            }
        }
    </div>
}